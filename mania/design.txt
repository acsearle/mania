
#  Design

## Motivating critiques of comparable games

  * SpaceChem is fun but constrained.  The 2D programming where instructions
    share the gamespace with the gameplay elements is better than Opus Magnum
    where the effectors are simply sequenced by linear instructions
  * TIS-100, Exapunks don't make effective use of their geometry.
  * Factorio is spatially opened but composed of static material flows.  There
    is mostly routing, but little programming.  Modern splitters are too
    powerful and make prioritization trivial.
  * Inserters are charismatic but WTF?  They consume much CPU.  They do
    floating point inverse kinematics! They are really just entry exit nodes.
  * Sub-tile placement on belts, and inserter tracking, pick-and-place, add
    nothing substantive to the gameplay.  They greatly explode the number
    of items in flight for not much purpose.
  * Putting things into and pulling them out of assemblers at random places is
    odd.  Compare minecraft workbench where position of materials determines
    product.
  * Too many combinations of entities.  Inserters take and place from ground,
    belts, and many chest-like objects (chests, production machines, trains,
    cars).
  * Moving extended objects through a grid is a nightmare.  Spacechem works
    OK but rotation and collision is odd.  Infinifactory is full of unintuitive
    ambiguities - like if an extended object is on top of two belts, which
    wins?  Can a stack of belts move at double speed?  What does rotation mean
    when things have to be on a grid, and how do they collide?
  * Factorio looks like a cellular automation but in practice the world grid
    serves mostly as an interface to define the graph of interactions for the
    "real" flow simulation.  This means unintuitive constraints on what is
    possible for the engine.  A belt is not a fundamental entity; you place it,
    it changes the connection graph for a flow segment.  When it is drawn or
    previewed or queried, it is back-synthesised from the flowing thing.
    Likewise train tracks, which are multi-tile objects that define connection
    graph.  Tiles under them can become pathologically complicated with many
    kinds of curve all present.

## Dogma

  * No algorithms.  We don't do pathfinding, voroni, graph cuts, etc.
  * No O(N) operations.  We don't do creep, flow, PDEs, anything that touches
    "all" parts of a system per frame.  No cellular automations.
  * No numerics.  No approximate or convergent operations.
  * No floats.  Specifically, we don't perform any rounding float operations,
    since we have to feed OpenGL a lot of floats.  We use floats like fixed
    point integers and never get close to rounding them.  This means dividing
    only by powers of two, for example.  These floats are usually coordinates
    into a power-of-two texture map.
  * Exceptions: Deterministic O(1) cleverness like hashing, hash tables.
    O(N log N) sorting for rendering.  O(N) rendering of N objects.
    Amortized O(1) resizes of vector-like objects--dangerous.
    
  * No polling or busy waiting.  Wait queues for game objects.
  
  * Pixel perfection.  No interpolation.  We put images on the screen at native
    resolution and pixel alignment.
  * sRGB and premultiplied alpha everywhere.
    
  * Determinism.  Unavoidable in the GUI but once we enter the gamestate, it
    is not permitted to rely on order of thread scheduling.  It is also not
    permitted to rely on observable parts of classes that do not impact
    logical equivalence.  For example, hash table ordering cannot be relied on;
    for operations that are not independent we must iterate a sorted copy.
    Even if the hashers on different machines are identical, the history of the
    hash table can give it different capacities and thus different orders.
    Also, vector capacity.  Also, object addresses.
    
  * Objects are Relocatable.
  * Moved-from objects are left in their Default state.
  * Default states are composed of zeroed bits.
  * Default states have no-op destructors.
  
  * Don't optimize non-worst cases.  (Such as turning off subsystems when they
    have no particpants; this is already the fast case.)  Exception: does this
    interact with "statistically" good things like amortized O(1) resizing?
  * Is amortized good enough?  Do we need to migrate tables and vectors
    piecewise rather than resize in one swoop?
  * Is allocation and deallocation per-frame admissible?
  

## Performance

Chunks: let us look up things by coarse position.  Only a few chunks on screen at any one
time.  The size tradeoff is that we have to look up all chunks intersecting the screen, which
argues for big chunks, but also consider all the sparse entities (and cells maybe) within these
chunks to see if they can be excluded from the render.  The ideal chunk will then be some
large fraction of the view dimensions.

The simulation moves forward in ticks.  This is the granularity with which things can happen
in the simulation.  Within a tick, the order of operations is deterministic but has major
performance implications.

The memory cells and terrain are static.  They don't do anything to themselves.  This rules out
things like erosion, creep -- expensive and nonlocal.  Only entities may act, to mutate
themselves, cells or terrain, and they may only act "locally", which is ill-defined but definitely
excludes chunks that are not immediate neighbours.  Entities can't act on each other; they
communicate indirectly by writing to cells (example: collision avoidance by locking cells)

Almost all entity actions are independent and can be performed in any order, but it is impossible
to efficiently determine which ones.  To make efficent use of threads, we want to be able to
cheaply break the work up into as many independent units as possible.

If we treat chunks as the unit of work, then each chunk must be sequenced to be either before
or after its immediate (including diagonal) neighbours.  This is a graph colouring problem; if
we can color the graph with n colours we have n buckets of parallelizable work, with each
bucket having to be completed in sequence.

When process a chunk, we can read
from and write to its neighbours, so the minimum independent work unit is a 3x3 block of
chunks.  This dooms us to 9 buckets.  We can make the smalled unit of scheduleable work
instead a 4x4 block where we process the 2x2 kernel in a fixed order.

    ABBA
    CDDC
    CDDC
    ABBA
    
We are not constrained to have our chunks in a square grid though; we can offset alternating
rows (or columns) by a half.  Then we have

     A A
    A B A
     A A

neighbours, halving the distance we can affect.  Nearest independent neighbours are
          B B
     A A B B B
    A A A B B B
     A A C C
        C C C
         C C
    
With the same trick as 2D, suppose we have
    
Within a bucket, each kernel can be processed in any order for load balancing.

A non-bucketed approach would involve tracking completions on a per-chunk basis across
a graph, with lots of coordination.

The fact that entities can wait on writes to cells means we don't know exactly how many entities
will have to be touched by cell.  Worse, we will sometimes write across a chunk boundary into
a chunk that was already processed, which we than have to process in another round until
quiesence occurs.  It is easy to contrive instructions and patterns that never quiesce. This
argues for some kind of throttling, such as one ticks's delay in waking, one wake per tick per cell,
etc.; unfortunately this is a bit arbitrary and will look bad?

There are useful cases where we
want multiple writes per tick to the same cell; a mutex is one such example where the waiter
observes the unlock to 0 and immediately writes 1.


## Traffic
Travelling entities lock cells.  This prevents collisions but like Factorio non-chain signals deadlocks will
occur when N entities form a loop of N cells, with a 2x2 being the simplest (is 2x1 headon usefully this?)

To break the problem can imagine traffic lights that alternate in locking entries to an intersection
or chain signals where we atomically lock multiple cells to cross multiple lanes of cross traffic.
(Implemented by waiting on first encountered already locked, until it is unlocked, repeated until
all unlocked are found?  Starvation is a worry.)
